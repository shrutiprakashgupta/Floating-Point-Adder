[2020-11-10 09:28:22 EST] yosys -o synth.v -p hierarchy -p proc -p opt -p memory -p opt -p fsm -p opt -p techmap -p opt -p "dfflibmap -liberty /yosys-yosys-0.9/examples/cmos/cmos_cells.lib" -p "abc -liberty /yosys-yosys-0.9/examples/cmos/cmos_cells.lib" -p opt -f verilog design.sv 2>&1 | awk '/^[0-9]+\. / { lines = 100; } /^[0-9]+\.[0-9]+\. / { lines = lines > 10 ? lines : 10; } { if (--lines > 0) print; if (lines == 0) print "[ ... ]\n"; } /READY\./ { if (lines <= 0) print; }' 
1. Executing Verilog-2005 frontend: design.sv
Parsing Verilog input from `design.sv' to AST representation.
Generating RTLIL representation for module `\fp_adder'.
Generating RTLIL representation for module `\decode'.
Generating RTLIL representation for module `\align'.
design.sv:211: Warning: System task `$display' outside initial block is unsupported.
Generating RTLIL representation for module `\spc_case'.
Generating RTLIL representation for module `\adder'.
Generating RTLIL representation for module `\normalize'.
Successfully finished Verilog frontend.

-- Running command `hierarchy' --

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Executing AST frontend in derive mode using pre-parsed AST for module `\normalize'.
Parameter 1 (\E_WIDTH) = 8
Parameter 2 (\M_WIDTH) = 23
Generating RTLIL representation for module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Parameter 1 (\E_WIDTH) = 8
Parameter 2 (\M_WIDTH) = 23
Generating RTLIL representation for module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\align'.
Parameter 1 (\E_WIDTH) = 8
Parameter 2 (\M_WIDTH) = 23
Generating RTLIL representation for module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
design.sv:211: Warning: System task `$display' outside initial block is unsupported.

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\spc_case'.
Parameter 1 (\E_WIDTH) = 8
Parameter 2 (\M_WIDTH) = 23
Generating RTLIL representation for module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\decode'.
Parameter 1 (\E_WIDTH) = 8
Parameter 2 (\M_WIDTH) = 23
Generating RTLIL representation for module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.

-- Running command `proc' --

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$design.sv:131$95 in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Marked 7 switch rules as full_case in process $proc$design.sv:247$75 in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Marked 2 switch rules as full_case in process $proc$design.sv:198$70 in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Marked 3 switch rules as full_case in process $proc$design.sv:318$59 in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Marked 2 switch rules as full_case in process $proc$design.sv:358$56 in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Marked 2 switch rules as full_case in process $proc$design.sv:358$49 in module normalize.
Marked 3 switch rules as full_case in process $proc$design.sv:318$39 in module adder.
Marked 7 switch rules as full_case in process $proc$design.sv:247$19 in module spc_case.
Marked 2 switch rules as full_case in process $proc$design.sv:198$14 in module align.
Marked 2 switch rules as full_case in process $proc$design.sv:131$2 in module decode.
Removed a total of 0 dead cases.

3.3. Executing PROC_INIT pass (extract init attributes).

3.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
Found async reset \rst in `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:247$75'.
Found async reset \rst in `$paramod\align\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:198$70'.
Found async reset \rst in `$paramod\adder\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:318$59'.
Found async reset \rst in `$paramod\normalize\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:358$56'.
Found async reset \rst in `\normalize.$proc$design.sv:358$49'.
Found async reset \rst in `\adder.$proc$design.sv:318$39'.
Found async reset \rst in `\spc_case.$proc$design.sv:247$19'.
Found async reset \rst in `\align.$proc$design.sv:198$14'.
Found async reset \rst in `\decode.$proc$design.sv:131$2'.

3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
     1/10: $2\gt_lt[0:0]
     2/10: $1\gt_lt[0:0]
     3/10: $0\gt_lt[0:0]
     4/10: $0\exp_diff[7:0]
     5/10: $0\sign_A[0:0]
     6/10: $0\sign_B[0:0]
     7/10: $0\mnt_B[22:0]
     8/10: $0\mnt_A[22:0]
     9/10: $0\exp_B[7:0]
    10/10: $0\exp_A[7:0]
Creating decoders for process `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:247$75'.
     1/8: $0\res[31:0] [31]
     2/8: $0\res[31:0] [22:0]
     3/8: $0\res[31:0] [30:23]
     4/8: $4\s_case[0:0]
     5/8: $2\s_case[0:0]
     6/8: $3\s_case[0:0]
     7/8: $0\s_case[0:0]
     8/8: $1\s_case[0:0]
Creating decoders for process `$paramod\align\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:198$70'.
     1/5: $0\add_sub[0:0]
     2/5: $0\exp_res[7:0]
     3/5: $0\sign_res[0:0]
     4/5: $0\align_B[22:0]
     5/5: $0\align_A[22:0]
Creating decoders for process `$paramod\adder\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:318$59'.
     1/2: $0\sum[32:0] [32:24]
     2/2: $0\sum[32:0] [23:0]
Creating decoders for process `$paramod\normalize\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:358$56'.
     1/2: $0\res[31:0] [31:23]
     2/2: $0\res[31:0] [22:0]
Creating decoders for process `\normalize.$proc$design.sv:358$49'.
     1/2: $0\res[31:0] [31:23]
     2/2: $0\res[31:0] [22:0]
Creating decoders for process `\adder.$proc$design.sv:318$39'.
     1/2: $0\sum[32:0] [32:24]
     2/2: $0\sum[32:0] [23:0]
Creating decoders for process `\spc_case.$proc$design.sv:247$19'.
     1/8: $0\res[31:0] [31]
     2/8: $0\res[31:0] [22:0]
     3/8: $0\res[31:0] [30:23]
     4/8: $4\s_case[0:0]
     5/8: $2\s_case[0:0]
     6/8: $3\s_case[0:0]
     7/8: $0\s_case[0:0]
     8/8: $1\s_case[0:0]
Creating decoders for process `\align.$proc$design.sv:198$14'.
     1/5: $0\add_sub[0:0]
     2/5: $0\exp_res[7:0]
     3/5: $0\sign_res[0:0]
     4/5: $0\align_B[22:0]
     5/5: $0\align_A[22:0]
Creating decoders for process `\decode.$proc$design.sv:131$2'.
     1/10: $2\gt_lt[0:0]
     2/10: $1\gt_lt[0:0]
     3/10: $0\gt_lt[0:0]
     4/10: $0\exp_diff[7:0]
     5/10: $0\sign_A[0:0]
     6/10: $0\sign_B[0:0]
     7/10: $0\mnt_B[22:0]
     8/10: $0\mnt_A[22:0]
     9/10: $0\exp_B[7:0]
    10/10: $0\exp_A[7:0]
Creating decoders for process `\fp_adder.$proc$design.sv:105$1'.
     1/1: $0\gt_lt_prev[0:0]
[ ... ]

3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\decode\E_WIDTH=8\M_WIDTH=23.\exp_A' using process `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
  created $adff cell `$procdff$316' with positive edge clock and negative level reset.
Creating register for signal `$paramod\decode\E_WIDTH=8\M_WIDTH=23.\exp_B' using process `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
  created $adff cell `$procdff$317' with positive edge clock and negative level reset.
Creating register for signal `$paramod\decode\E_WIDTH=8\M_WIDTH=23.\mnt_A' using process `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
  created $adff cell `$procdff$318' with positive edge clock and negative level reset.
Creating register for signal `$paramod\decode\E_WIDTH=8\M_WIDTH=23.\mnt_B' using process `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
  created $adff cell `$procdff$319' with positive edge clock and negative level reset.
[ ... ]

3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
Removing empty process `$paramod\decode\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:131$95'.
Found and cleaned up 6 empty switches in `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:247$75'.
Removing empty process `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:247$75'.
Found and cleaned up 1 empty switch in `$paramod\align\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:198$70'.
Removing empty process `$paramod\align\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:198$70'.
Found and cleaned up 2 empty switches in `$paramod\adder\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:318$59'.
Removing empty process `$paramod\adder\E_WIDTH=8\M_WIDTH=23.$proc$design.sv:318$59'.
[ ... ]

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
<suppressed ~1 debug messages>
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
<suppressed ~5 debug messages>
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
<suppressed ~4 debug messages>
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
<suppressed ~4 debug messages>
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
<suppressed ~1 debug messages>
Optimizing module normalize.
<suppressed ~1 debug messages>
Optimizing module adder.
<suppressed ~4 debug messages>
Optimizing module spc_case.
<suppressed ~5 debug messages>
Optimizing module align.
<suppressed ~4 debug messages>
Optimizing module decode.
<suppressed ~1 debug messages>
Optimizing module fp_adder.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
<suppressed ~9 debug messages>
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\spc_case'.
<suppressed ~9 debug messages>
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
Finding identical cells in module `\fp_adder'.
Removed a total of 6 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$167.
    dead port 2/2 on $mux $procmux$164.
    dead port 1/2 on $mux $procmux$185.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $ternary$design.sv:356$55: \sum [23:1] -> { 1'1 \sum [22:1] }
  Analyzing evaluation results.
Running muxtree optimizer on module \normalize..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $ternary$design.sv:356$48: \sum [23:1] -> { 1'1 \sum [22:1] }
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spc_case..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$281.
    dead port 1/2 on $mux $procmux$302.
Running muxtree optimizer on module \align..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 6 multiplexer ports.
<suppressed ~30 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \normalize.
  Optimizing cells in module \adder.
  Optimizing cells in module \spc_case.
[ ... ]

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\spc_case'.
[ ... ]

4.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \normalize..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \spc_case..
[ ... ]

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
[ ... ]

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \adder.
  Optimizing cells in module \align.
  Optimizing cells in module \decode.
[ ... ]

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
[ ... ]

4.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
[ ... ]

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

4.16. Finished OPT passes. (There is nothing left to do.)

-- Running command `memory' --

5. Executing MEMORY pass.

5.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
Finding unused cells or wires in module \fp_adder..
Finding unused cells or wires in module \normalize..
Finding unused cells or wires in module \spc_case..

5.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
Finding unused cells or wires in module \fp_adder..
Finding unused cells or wires in module \normalize..
Finding unused cells or wires in module \spc_case..

5.5. Executing MEMORY_COLLECT pass (generating $mem cells).

5.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

-- Running command `opt' --

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
Optimizing module fp_adder.
Optimizing module normalize.
Optimizing module spc_case.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
Finding identical cells in module `\fp_adder'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\spc_case'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \align..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \normalize..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spc_case..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \adder.
  Optimizing cells in module \align.
  Optimizing cells in module \decode.
  Optimizing cells in module \fp_adder.
  Optimizing cells in module \normalize.
  Optimizing cells in module \spc_case.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
[ ... ]

6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
[ ... ]

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

6.9. Finished OPT passes. (There is nothing left to do.)

-- Running command `fsm' --

7. Executing FSM pass (extract and optimize FSM).

7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
Finding unused cells or wires in module \fp_adder..
Finding unused cells or wires in module \normalize..
Finding unused cells or wires in module \spc_case..

7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

-- Running command `opt' --

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
Optimizing module fp_adder.
Optimizing module normalize.
Optimizing module spc_case.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
Finding identical cells in module `\fp_adder'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\spc_case'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \align..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \normalize..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spc_case..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \adder.
  Optimizing cells in module \align.
  Optimizing cells in module \decode.
  Optimizing cells in module \fp_adder.
  Optimizing cells in module \normalize.
  Optimizing cells in module \spc_case.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
[ ... ]

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
[ ... ]

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

8.9. Finished OPT passes. (There is nothing left to do.)

-- Running command `techmap' --

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=1:A_WIDTH=32:B_SIGNED=1:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=1:A_WIDTH=32:B_SIGNED=1:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=1:A_WIDTH=32:B_SIGNED=1:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:81dd954bcfd8fa63107370566208c9a68ac353ca$paramod$978faab8c0c5ffaa9c0cbe77782a31c00b244c5f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=1:A_WIDTH=32:B_SIGNED=1:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=1:A_WIDTH=32:B_SIGNED=1:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=1:A_WIDTH=32:B_SIGNED=1:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=23:B_SIGNED=0:B_WIDTH=23:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=23\B_WIDTH=23\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=24 for cells of type $lcu.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
No more expansions possible.
<suppressed ~3355 debug messages>

-- Running command `opt' --

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
<suppressed ~75 debug messages>
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
<suppressed ~432 debug messages>
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
<suppressed ~279 debug messages>
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
<suppressed ~337 debug messages>
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
<suppressed ~93 debug messages>
Optimizing module adder.
<suppressed ~75 debug messages>
Optimizing module align.
<suppressed ~432 debug messages>
Optimizing module decode.
<suppressed ~279 debug messages>
Optimizing module fp_adder.
Optimizing module normalize.
<suppressed ~337 debug messages>
Optimizing module spc_case.
<suppressed ~93 debug messages>

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
<suppressed ~69 debug messages>
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
<suppressed ~222 debug messages>
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
<suppressed ~660 debug messages>
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
<suppressed ~162 debug messages>
Finding identical cells in module `\adder'.
<suppressed ~69 debug messages>
Finding identical cells in module `\align'.
<suppressed ~222 debug messages>
Finding identical cells in module `\decode'.
<suppressed ~660 debug messages>
Finding identical cells in module `\fp_adder'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\spc_case'.
<suppressed ~162 debug messages>
Removed a total of 742 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \align..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decode..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \normalize..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \spc_case..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \adder.
  Optimizing cells in module \align.
  Optimizing cells in module \decode.
  Optimizing cells in module \fp_adder.
  Optimizing cells in module \normalize.
  Optimizing cells in module \spc_case.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
[ ... ]

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
[ ... ]

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
[ ... ]

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \adder.
  Optimizing cells in module \align.
  Optimizing cells in module \decode.
[ ... ]

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
[ ... ]

10.13. Executing OPT_RMDFF pass (remove dff with constant values).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
[ ... ]

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

10.16. Finished OPT passes. (There is nothing left to do.)

-- Running command `dfflibmap -liberty /yosys-yosys-0.9/examples/cmos/cmos_cells.lib' --

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFFSR_PNN_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFF _DFF_N_ (.C(~C), .D( D), .Q( Q));
    DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.C(~C), .D( D), .Q( Q), .R(~R), .S( 0));
    DFFSR _DFF_NN1_ (.C(~C), .D( D), .Q( Q), .R( 0), .S(~R));
    DFFSR _DFF_NP0_ (.C(~C), .D( D), .Q( Q), .R( R), .S( 0));
    DFFSR _DFF_NP1_ (.C(~C), .D( D), .Q( Q), .R( 0), .S( R));
    DFFSR _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R(~R), .S( 0));
    DFFSR _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( 0), .S(~R));
    DFFSR _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R), .S( 0));
    DFFSR _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( 0), .S( R));
    DFFSR _DFFSR_NNN_ (.C(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_NNP_ (.C(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPN_ (.C(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPP_ (.C(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNN_ (.C( C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNP_ (.C( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPN_ (.C( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));
Mapping DFF cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23':
  mapped 33 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23':
  mapped 56 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23':
  mapped 73 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23':
  mapped 32 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23':
  mapped 33 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `\adder':
  mapped 33 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `\align':
  mapped 56 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `\decode':
  mapped 73 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `\fp_adder':
  mapped 1 $_DFF_N_ cells to \DFF cells.
Mapping DFF cells in module `\normalize':
  mapped 32 $_DFF_PN0_ cells to \DFFSR cells.
Mapping DFF cells in module `\spc_case':
  mapped 33 $_DFF_PN0_ cells to \DFFSR cells.

-- Running command `abc -liberty /yosys-yosys-0.9/examples/cmos/cmos_cells.lib' --

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `$paramod\adder\E_WIDTH=8\M_WIDTH=23' to `<abc-temp-dir>/input.blif'..
Extracted 430 gates and 522 wires to a netlist network with 90 inputs and 66 outputs.

12.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/yosys-yosys-0.9/examples/cmos/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      262
ABC RESULTS:               NOR cells:      312
ABC RESULTS:               NOT cells:      124
ABC RESULTS:        internal signals:      366
ABC RESULTS:           input signals:       90
ABC RESULTS:          output signals:       66
Removing temp directory.

12.2. Extracting gate netlist of module `$paramod\align\E_WIDTH=8\M_WIDTH=23' to `<abc-temp-dir>/input.blif'..
Extracted 339 gates and 415 wires to a netlist network with 74 inputs and 112 outputs.

12.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/yosys-yosys-0.9/examples/cmos/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.2.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      390
ABC RESULTS:               NOR cells:      159
ABC RESULTS:               NOT cells:      136
ABC RESULTS:        internal signals:      229
ABC RESULTS:           input signals:       74
ABC RESULTS:          output signals:      112
Removing temp directory.

12.3. Extracting gate netlist of module `$paramod\decode\E_WIDTH=8\M_WIDTH=23' to `<abc-temp-dir>/input.blif'..
Extracted 230 gates and 248 wires to a netlist network with 17 inputs and 98 outputs.

12.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/yosys-yosys-0.9/examples/cmos/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
[ ... ]

12.4. Extracting gate netlist of module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23' to `<abc-temp-dir>/input.blif'..
Extracted 110 gates and 145 wires to a netlist network with 33 inputs and 63 outputs.

12.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.5. Extracting gate netlist of module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23' to `<abc-temp-dir>/input.blif'..
Extracted 302 gates and 386 wires to a netlist network with 82 inputs and 66 outputs.

12.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.6. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 430 gates and 522 wires to a netlist network with 90 inputs and 66 outputs.

12.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.7. Extracting gate netlist of module `\align' to `<abc-temp-dir>/input.blif'..
Extracted 339 gates and 415 wires to a netlist network with 74 inputs and 112 outputs.

12.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.8. Extracting gate netlist of module `\decode' to `<abc-temp-dir>/input.blif'..
Extracted 230 gates and 248 wires to a netlist network with 17 inputs and 98 outputs.

12.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.9. Extracting gate netlist of module `\fp_adder' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

12.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.10. Extracting gate netlist of module `\normalize' to `<abc-temp-dir>/input.blif'..
Extracted 110 gates and 145 wires to a netlist network with 33 inputs and 63 outputs.

12.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

12.11. Extracting gate netlist of module `\spc_case' to `<abc-temp-dir>/input.blif'..
Extracted 302 gates and 386 wires to a netlist network with 82 inputs and 66 outputs.

12.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /yosys-yosys-0.9/examples/cmos/cmos_cells.lib 
[ ... ]

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
Optimizing module fp_adder.
Optimizing module normalize.
Optimizing module spc_case.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
Finding identical cells in module `\fp_adder'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\spc_case'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\align\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \align..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decode..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fp_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \normalize..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \spc_case..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\align\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
  Optimizing cells in module \adder.
  Optimizing cells in module \align.
  Optimizing cells in module \decode.
  Optimizing cells in module \fp_adder.
  Optimizing cells in module \normalize.
  Optimizing cells in module \spc_case.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\align'.
Finding identical cells in module `\decode'.
Finding identical cells in module `\fp_adder'.
Finding identical cells in module `\normalize'.
Finding identical cells in module `\spc_case'.
Removed a total of 0 cells.

13.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\align\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\decode\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\normalize\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \align..
Finding unused cells or wires in module \decode..
[ ... ]

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\align\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\decode\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\normalize\E_WIDTH=8\M_WIDTH=23.
Optimizing module $paramod\spc_case\E_WIDTH=8\M_WIDTH=23.
Optimizing module adder.
Optimizing module align.
Optimizing module decode.
[ ... ]

13.9. Finished OPT passes. (There is nothing left to do.)

-- Writing to `synth.v' using backend `verilog' --

14. Executing Verilog backend.
Dumping module `$paramod\adder\E_WIDTH=8\M_WIDTH=23'.
Dumping module `$paramod\align\E_WIDTH=8\M_WIDTH=23'.
Dumping module `$paramod\decode\E_WIDTH=8\M_WIDTH=23'.
Dumping module `$paramod\normalize\E_WIDTH=8\M_WIDTH=23'.
Dumping module `$paramod\spc_case\E_WIDTH=8\M_WIDTH=23'.
Dumping module `\adder'.
Dumping module `\align'.
Dumping module `\decode'.
Dumping module `\fp_adder'.
Dumping module `\normalize'.
Dumping module `\spc_case'.

Warnings: 1 unique messages, 2 total
End of script. Logfile hash: ec30645318
CPU: user 5.22s system 0.05s, MEM: 54.11 MB total, 22.21 MB resident
Yosys 0.9 (git sha1 UNKNOWN, clang 3.4.2 -fPIC -Os)
Time spent: 39% 1x write_verilog (2 sec), 13% 15x opt_merge (0 sec), ...
Creating result.zip...
  adding: .yosys_history (stored 0%)
  adding: synth.v (deflated 85%)
  adding: work/ (stored 0%)
  adding: testbench.sv (stored 0%)
  adding: design.sv (deflated 82%)
  adding: ACCELLERA_OVL_VHDL_LIB/ (stored 0%)
  adding: .bash_logout (stored 0%)
  adding: .bashrc (deflated 23%)
  adding: .bash_profile (deflated 21%)
[2020-11-10 09:28:30 EST] Waiting for download...
Done
